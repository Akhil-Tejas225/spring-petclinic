name: spc_git
run-name: ${{ github.actor }}
on:
  workflow_dispatch: {}
  push:
    paths-ignore:
      - Jenkinsfile

jobs:
    Job-1:
      name: clone and test
      runs-on: ubuntu-latest
      steps: 
         - name: git clone
           uses: actions/checkout@v4
         - name: list files
           run: ls -al
         - name: cache dependencies
           uses: actions/cache@v4
           with:
             path: ~/.m2/repository
             key: maven-${{ hashFiles('**/pom.xml') }}
         - name: package
           run: mvn clean package
          
    job-2:
      name: package
      needs: Job-1
      runs-on: ubuntu-latest
      outputs:
        output1: ${{ steps.md_file.outputs.md_name}}      
      steps:
         - name: cache dependencies
           uses: actions/cache@v4
           with:
             path: ~/.m2/repository
             key: maven-${{ hashFiles('**/pom.xml') }}
         - name: list files
           run: ls -al         

         - name: find and copy build artifacts
           run: |
             mkdir -p artifacts && mkdir testreports
             find . -type f -name spring-petclinic*.jar -exec cp {} artifacts/ \;
             find . -type f -name TEST-*.xml -exec cp {} testreports/ \;
         - name: get md file
           run: find . -type f  -name "*.md" -exec echo "md_name={}" \; >> $GITHUB_OUTPUT 
           id: md_file

         - name: uploading build atrifacts
           uses: actions/upload-artifact@v4
           with: 
              name: dist artifacts
              path: |
                 artifacts/
                 testreports/
    Job-3:
        name: download artifacts
        needs: job-2
        runs-on: ubuntu-latest
        steps:
            - name: download-artifacts
              uses: actions/download-artifact@v4
              with:
                name: dist artifacts
                path: |
                  artifacts/
                  testreports/
            - name: list files
              run: ls
            - name: get_output
              run: echo "${{ needs.job-2.outputs.output1 }}"

        #  - name: upload Test results
        #    uses: actions/upload-artifact@v4
        #    with:
        #       name: upload-Testresults
        #       path: testreports/
        
    # job-2:
    #   name: build
    #   needs: Job-1
    #   runs-on: ubuntu-latest
    #   steps:
    #     - name: build
    #       run: mvn clean package

    # Job-2:
    #     name: spc_test1
    #     # needs: Job-1
    #     runs-on: ubuntu-latest
    #     steps:
    #       - name: install_dotnet
    #         run: sudo apt update && sudo apt install dotnet-sdk-8.0 -y


           
    # There 3 types aspects on "on" state:
    # pipelines will triggered based on events and actions
    # we can add filters to the events
#     🧨 1. Trigger Events (the on: block)
# These are the events that can start your workflow:

# 🔹 Common Ones:
# Event	                 Description
# push	                 Trigger on every push to specified branches/tags
# pull_request	         Trigger on PR events (open, sync, reopen, etc.)
# workflow_dispatch	     Manual trigger via GitHub UI
# schedule	             Cron-based trigger (like a cronjob)
# release	               Trigger on GitHub Release actions
# issues	               Trigger on issue events
# issue_comment          Trigger on comment on issues or PRs
# fork	                 Trigger when a repo is forked
# watch	                 Trigger when repo is starred
# deployment	           Trigger on deployments
# repository_dispatch	Custom event via API

# ⚙️ 2. Trigger Activities (sub-events / types)
# Each trigger has activities (also called event types). For example:

# 🧪 For pull_request:

# on:
#   pull_request:
#     types: [opened, reopened, synchronize, closed]
# Type	                 What it does
# opened	               When PR is created
# reopened	             When PR is reopened
# synchronize            New commit pushed to PR
# closed	               When PR is closed
# assigned	             When PR is assigned to someone

# 🧪 For issues:

# on:
#   issues:
#     types: [opened, labeled, assigned]
# Type	                  Meaning
# opened	                New issue created
# labeled	                A label was added
# assigned	              An issue was assigned to someone

# 🧪 For release:

# on:
#   release:
#     types: [published, created, prereleased]
# Type	                  Description
# published	              When a release is published
# created	                When a release is created (before publish)
# prereleased	            When a prerelease is created

# 🧹 3. Filters (branch, paths, tags, etc.)
# 🔸 Branch filters:

# on:
#   push:
#     branches:
#       - main
#       - 'release/*'
# 🔸 Ignore branches:
# on:
#   push:
#     branches-ignore:
#       - 'docs/*'
# 🔸 Tag filters:

# on:
#   push:
#     tags:
#       - 'v*'
# 🔸 Path filters:

# on:
#   push:
#     paths:
#       - 'src/**'
#       - '!docs/**'   # exclude paths
# ⚡ Special Triggers
# 🧑‍💻 Manual trigger from UI:

# on:
#   workflow_dispatch:
#     inputs:
#       environment:
#         description: 'Deploy to environment'
#         required: true
#         default: 'staging'
# ⏰ Scheduled Trigger:

# on:
#   schedule:
#     - cron: '0 0 * * *' # every midnight UTC
# Use crontab.guru to test these.

# 🧠 Pro Tip
# You can combine multiple events:


# 
# on:
#   push:
#     branches: [main]
#   pull_request:
#     branches: [main]
#   workflow_dispatch:
# And GitHub will treat it like a logical OR – if any of the events occur, the workflow runs.


              